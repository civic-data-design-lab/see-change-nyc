const dataset = d3.csv("./data/heat-vulnerability-index.csv")
	.then(function(data) {
		data.forEach(function(d) {
			boroCD: +d.boroCD;
			cdName: d.cdName;
			borough: d.borough;
			temp: +d.temp;
			tempScaled: +d.tempScaled;
			veg: +d.veg;
			vegScaled: +d.vegScaled;
			poverty: +d.poverty;
			povertyScaled: +d.povertyScaled;
			black: +d.black;
			blackScaled: +d.blackScaled;
			ac: +d.ac;
			acScaled: +d.acScaled;
			hvi: +d.hvi;
		});

		if (!keys.length) {
			keys = data.columns;
		};
		if (!features.length) {
			features = data.columns.slice(3);
		};
		if (!featuresScaled.length) {
			featuresScaled = features.filter((item) => item.endsWith("Scaled"));
		}

		// data for borough average
		const distinct = (value, index, self) => {
			return self.indexOf(value) === index;
		};

		// borough list
		boroughList = data.map(function(item) {	return item.borough})
			.filter(distinct);

		for (var b = 0; b < boroughList.length; b++) {
			let borough = boroughList[b];
			item = {};

			for (var i = 0; i < features.length; i++) {
				let property = features[i];
				totalBorough = data.filter(d => d.borough == borough).reduce((accumulator, value) => (accumulator + +value[property]), 0);
				neighborhoodsPerBorough = data.filter(d => d.borough == borough).length;
				(borough == "Manhattan") ? (item.boroCD = 100)
					: (borough == "Bronx") ? (item.boroCD = 200)
					: (borough == "Brooklyn") ? (item.boroCD = 300)
					: (borough == "Queens") ? (item.boroCD = 400)
					: (borough == "Staten Island") ? (item.boroCD = 500)
					: item.boroCD = undefined;
				item.neighborhoods = neighborhoodsPerBorough;
				item.borough = borough;
				item[property] = totalBorough/neighborhoodsPerBorough;
				if (property.endsWith("Scaled")) {
					item[property] = Math.round(item[property]);
				} else {
					item[property] = roundAccurately(item[property], 1);
				}
			};
			boroughAverage.push(item);
		};

		// neighborhood list
		districtList = data.map(function(item) {return item.boroCD});

		// profile data
		profileData = [data[6], data[26]];

		// plot data
		plotDataRow("#hvi-borough", boroughAverage);
		plotDataRow("#hvi-district", data);
		plotProfileRow("#hvi-profile", profileData);

		console.log(data);
		console.log(boroughAverage);
		console.log(profileData);
	});

// aspect ratio
const width = 900;
const height = 22;
const hexOffset = 400;

var winHeight = $(window).height();

// define svg
// const svg = d3.select("#hvi-all")
// 	.append("svg")
// 		.attr("viewBox", [-1, 3, width, height]);

// tooltip
var div = d3.select("body").append("div")
	.attr("id", "tooltip")
	.style("display", "none")
	.style('z-index', '10')
	.text("info");

var divProfile1 = d3.select("#profile1")
	.html("");

var divProfile2 = d3.select("#profile2")
	.html("");

// manipulated datasets
let keys = [];
let features = [];
let featuresScaled = [];
let categories = ["Surface Temperature", "Vegetation Cover", "Non-White Population", "People in Poverty", "No Access to Air Conditioner"];
let boroughAverage = [];
let boroughList = [];
let districtList = [];
let profileData = [];

// round accurately function
function roundAccurately(number, decimalPlaces) {
	return Number(Math.round(number + "e" + decimalPlaces) + "e-" + decimalPlaces);	
};

// labels and colors
const featureLabel = d3.scaleOrdinal()
	.domain("temp", "veg", "black", "poverty", "ac")
	.range(categories)
	.unknown("");
const featureColor = d3.scaleOrdinal()
	.domain(categories)
	.range(["#dcc651", "#2d7f64", "#424d9b", "#8f2e62", "#f05d43"])
	.unknown("#444444");

// tooltip info per datapoint
function datapointTooltip(d) {
	return (d.feature == "temp") ? d[d.feature] + "&deg;F&ensp;Surface Temperature"
	: (d.feature == "veg") ? d[d.feature] + "%&ensp;Vegetation Cover"
	: (d.feature == "black") ? d[d.feature] + "%&ensp;Non-White Population"
	: (d.feature == "poverty") ? d[d.feature] + "%&ensp;People in Poverty"
	: (d.feature == "ac") ? d[d.feature] + "%&ensp;No Access to Air Conditioner"
	: "";
}

function profileString(d) {
	return (!d.cdName) ? d.borough + "<br><span class='data1'>" + d.hvi + "</span><p>" + "high" + "</p><p>Heat Vulnerability</p><p>compared to other NYC neighborhoods</p>" 
	: (d.borough == "Bronx") ? d.cdName + ", BX" + "<br><span class='data1'>" + d.hvi + "</span><p>" + "high" + "</p><p>Heat Vulnerability</p><p>compared to other NYC neighborhoods</p>" 
	: (d.borough == "Brooklyn") ? d.cdName + ", BK" + "<br><span class='data1'>" + d.hvi + "</span><p>" + "high" + "</p><p>Heat Vulnerability</p><p>compared to other NYC neighborhoods</p>" 
	: (d.borough == "Manhattan") ? d.cdName + ", MN" + "<br><span class='data1'>" + d.hvi + "</span><p>" + "high" + "</p><p>Heat Vulnerability</p><p>compared to other NYC neighborhoods</p>" 
	: (d.borough == "Queens") ? d.cdName + ", QN" + "<br><span class='data1'>" + d.hvi + "</span><p>" + "high" + "</p><p>Heat Vulnerability</p><p>compared to other NYC neighborhoods</p>" 
	: (d.borough == "Staten Island") ? d.cdName + ", SI" + "<br><span class='data1'>" + d.hvi + "</span><p>" + "high" + "</p><p>Heat Vulnerability</p><p>compared to other NYC neighborhoods</p>" 
	: d.cdName;
}

// draw hexagon row
const hexRadius = 10;
var hexbin = d3.hexbin()
	.radius(hexRadius);

// center position of each hexagon
// var points = [];
// for (var i = 0; i < columns; i++) {
// 	var x = hexRadius * i * Math.sqrt(3);
// 	var y = height/2;
// 	points.push([x,y]);
// }

function getHexCoordinates(dataPoint) {
	var points = [];
	for (var i = 0; i < (featuresScaled.length * 5); i++) {
			if (i < 5) {
				var f = 0;
			} else if (i < 10) {
				var f = 1;
			} else if (i < 15) {
				var f = 2;
			} else if (i < 20) {
				var f = 3;
			} else {
				var f = 4;
			}
			let featureName = featuresScaled[f].slice(0, -6);
			let featureScaled = featuresScaled[f];

			let item = [];
			item.x = hexOffset + i * hexRadius * Math.sqrt(3);
			item.y = height/2;
			item.feature = featureName;
			item[featureName] = dataPoint[featureName];
			item[featureScaled] = dataPoint[featureScaled];
			item.boroCD = dataPoint.boroCD;
			item.cdName = dataPoint.cdName;
			item.borough = dataPoint.borough;
			if ((i - f*5) < dataPoint[featureScaled]) {
				item.fill = featureColor(categories[f]);
			} else {
				item.fill = "#fff";
			}

			points.push(item);
	};
	return points;
}

function plotHexagons(svg, data) {
	let hexData = getHexCoordinates(data);

	svg.append("g")
			.attr("class", "hex-row")
		.selectAll("path")
		.data(hexData)
		.enter()
		.append("path")
			.attr("class", (d) => "hexagon-" + d.boroCD)
			.attr("d", (d) => {
				return "M" + d.x  + "," + d.y + hexbin.hexagon();
			})
			.attr("stroke", "#000")
			.attr("stroke-width", "1px")
			.style("fill", (d) => d.fill)
};

function plotProfileRow(divID, data) {
	for (var i = 0; i < data.length; i++) {
		let chartID = "#chart" + data[i].boroCD;
		let rowData = [data[i]];

		const svgProfileRow = d3.select(divID)
			.append("svg")
				.attr("id", "chart" + data[i].boroCD)
				.attr("class", "svg-hvi-profile")
				.attr("viewBox", [0, 0 - height*3, width, height*4])

		plotHexagons(svgProfileRow, data[i]);
		
		svgProfileRow.append("g")
				.attr("class", "text-place")
			.selectAll("text")
			.data(rowData)
			.enter()
			.append("text")
				.attr("class", "label-place")
				.text((d) => {
					return (!d.cdName) ? d.borough
					: (d.borough == "Bronx") ? d.cdName + ", BX"
					: (d.borough == "Brooklyn") ? d.cdName + ", BK"
					: (d.borough == "Manhattan") ? d.cdName + ", MN"
					: (d.borough == "Queens") ? d.cdName + ", QN"
					: (d.borough == "Staten Island") ? d.cdName + ", SI"
					: d.cdName;
				})
				.attr("text-anchor", "start")
				.attr("x", 10)
				.attr("y", height - 7)

		svgProfileRow.append("g")
				.attr("class", "text-hvi")
			.selectAll("text")
			.data(rowData)
			.enter()		
			.append("text")
				.attr("class", "label-hvi-score")
				.text((d) => "HVI = " + d.hvi)
				.attr("text-anchor", "start")
				.attr("x", hexOffset + 44 * hexRadius)
				.attr("y", height - 7)

		// hover data
		svgProfileRow.select(".hex-row")
			.selectAll("path")
			.on("mouseover", function(event, d) {
				div.html((divHtml) => datapointTooltip(d))
					.style("color", "#000")
					// .style("color", (divHtml) => featureColor(datapointTooltip(d.feature)))
					.style("display", "block")
			})
			.on("mousemove", function(event) {
				div.style("top", (divHtml) => {
						var divY = event.pageY;
						var tooltipHeight = $("#tooltip").outerHeight();
						if ((divY - winHeight + tooltipHeight) > winHeight) {
							divY = divY - tooltipHeight - 10;
						};
						return (divY + 10) + "px"
					})
					.style("left", (divHtml) => {
						var divX = event.pageX;
						var tooltipWidth = $("#tooltip").outerWidth();
						var displayWidth = $(window).width();
						if ((divX + tooltipWidth) > displayWidth) {
							divX = divX - tooltipWidth - 10;
						};
						return (divX + 10) + "px"
					})
			})
			.on("mouseout", function() {
				div.style("display", "none");
			})
	}
}

function plotDataRow(divID, data) {
	if (data.length == 5) {
		var dataList = [100, 200, 300, 400, 500];
	} else {
		var dataList = districtList;
	}
	for (var i = 0; i < data.length; i++) {
		let chartID = "#chart" + data[i].boroCD;
		let rowData = data.filter(d => d.boroCD == dataList[i]);

		const svgDataRow = d3.select(divID)
			.append("svg")
				.attr("id", "chart" + data[i].boroCD)
				.attr("class", "svg-hvi-row")
				.attr("viewBox", [0, 0, width, height])

		plotHexagons(svgDataRow, data[i]);
		
		svgDataRow.append("g")
				.attr("class", "text-place")
			.selectAll("text")
			.data(rowData)
			.enter()
			.append("text")
				.attr("class", "label-place")
				.text((d) => {
					return (!d.cdName) ? d.borough
					: (d.borough == "Bronx") ? d.cdName + ", BX"
					: (d.borough == "Brooklyn") ? d.cdName + ", BK"
					: (d.borough == "Manhattan") ? d.cdName + ", MN"
					: (d.borough == "Queens") ? d.cdName + ", QN"
					: (d.borough == "Staten Island") ? d.cdName + ", SI"
					: d.cdName;
				})
				.attr("text-anchor", "end")
				.attr("x", hexOffset - 15)
				.attr("y", height - 7)

		svgDataRow.append("g")
				.attr("class", "text-hvi")
			.selectAll("text")
			.data(rowData)
			.enter()		
			.append("text")
				.attr("class", "label-hvi-score")
				.text((d) => "HVI = " + d.hvi)
				.attr("text-anchor", "start")
				.attr("x", hexOffset + 44 * hexRadius)
				.attr("y", height - 7)

		// hover data
		svgDataRow.select(".hex-row")
			.selectAll("path")
			.on("mouseover", function(event, d) {
				div.html((divHtml) => datapointTooltip(d))
					.style("color", "#000")
					// .style("color", (divHtml) => featureColor(datapointTooltip(d.feature)))
					.style("display", "block")
			})
			.on("mousemove", function(event) {
				div.style("top", (divHtml) => {
						var divY = event.pageY;
						var tooltipHeight = $("#tooltip").outerHeight();
						if ((divY - winHeight + tooltipHeight) > winHeight) {
							divY = divY - tooltipHeight - 10;
						};
						return (divY + 10) + "px"
					})
					.style("left", (divHtml) => {
						var divX = event.pageX;
						var tooltipWidth = $("#tooltip").outerWidth();
						var displayWidth = $(window).width();
						if ((divX + tooltipWidth) > displayWidth) {
							divX = divX - tooltipWidth - 10;
						};
						return (divX + 10) + "px"
					})
			})
			.on("mouseout", function() {
				div.style("display", "none");
			})
	}
}

// nav display on load
$(document).ready(function(){
	$("#nav>ul>li>ul>li").addClass("grey");
})

// nav borough filter display
function filterBoroughNav(boroughId) {
	$("#city").addClass("grey").css("color", "#d1d3d4");
	$("#borough").removeClass("grey").css("color", "#000");

	$("#nav>ul>li>ul>li").addClass("grey").css("color", "#d1d3d4");
	$("#" + boroughId).removeClass("grey").css("color", "#000");
	if (boroughId == "nyc") {
		$("#currentborough").html("&mdash;All");
	} else if (boroughId == "statenisland") {
		$("#currentborough").html("&mdash;Staten Island");
	}
	else {
		$("#currentborough").html("&mdash;" + boroughId);
	}
}

// nav clicks
$("#city").on("click", function() {
	$(this).removeClass("grey").css("color", "#000");
	$("#borough").addClass("grey").css("color", "#d1d3d4");

	$("#nav>ul>li>ul>li").addClass("grey").css("color", "#d1d3d4");
	$("#currentborough").html("");


});
$("#borough").on("click", function() {
	$(this).removeClass("grey").css("color", "#000");
	$("#city").addClass("grey").css("color", "#d1d3d4");

	$("#nav>ul>li>ul>li").addClass("grey").css("color", "#d1d3d4");
	$("#nyc").removeClass("grey").css("color", "#000");
	$("#currentborough").html("&mdash;All");

});
// nav click by filtering boroughs
$("#nav>ul>li>ul>li").on("click", function() {
	filterBoroughNav($(this).attr("id"));

	let chartBoroughClass = ".chart" + $(this).attr("id");
	$(chartBoroughClass).css("display", "block");
})